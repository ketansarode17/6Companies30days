//There is a pattern in this question.
/*Consider a testcase 
nums = [4,3,2,6]
here f(0)=4*0+3*1+2*2+6*3
and  f(1)=6*0+4*1+3*2+2*3
so here we can see that in f(0) 4 was multiplied with 0,3 with 1 and 2 with 2 but in f(1)
they are multiplied with (0+1=1),(1+1=2),(2+1=3) respectively.
and 6 was multiplied with 3 in f(0) which after rotated would be at 0th position and won't contribute to answer in f(1)
So we can conclude our approach as :
f(i+1)=f(i)+sum(nums)-(last_element_of_f(i)*nums.size())
*/

class Solution {
public:
    int maxRotateFunction(vector<int>& nums) {
        int n=nums.size(),sum=0,f=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            f+=i*nums[i];
        }
        cout<<f<<endl;
        int res=f;
        for(int i=1;i<=n-1;i++)
        {
            f=f+sum-(n*(nums[n-i]));
            res=max(f,res);
            //cout<<f<<endl;
        }
        return res;
    }
};
