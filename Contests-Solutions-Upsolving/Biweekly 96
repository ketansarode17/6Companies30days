C. Maximum Subsequence Score :https://leetcode.com/problems/maximum-subsequence-score/description/

Intuition/Logic :-
sort nums2 in descending order and consider each element in nums2 as minimum value also sort simultaneously the nums1 vector 
e.g. nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
after sorting nums2 = 4,3,2,1 nums1= 2,3,1,3.
we will push all the elements in pq till index k-2 with their sum then
for each min term in nums2 from index >=k-1 we want maximum sum upto that index for this we will use priority queue which will give up the top k max values easily in log(n) time.
we will pop the top(min) element from pq and repush the nums1[i](current position of nums2 - i) and also update the sum.
update ans=max(ans,sum*nums2[i])

Code:-
class Solution {
    private:
    static bool comp(vector<int>&p1,vector<int>&p2)
    {
        return p1[0]>p2[0];
    }
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>>vc;
        int n=nums1.size();
        //cout<<n<<endl;
        for(int i=0;i<n;i++)
        {
            vc.push_back({nums2[i],i});
        }
        sort(vc.begin(),vc.end(),comp);
        vector<int>dummy1(n),dummy2(n);
        for(int i=0;i<n;i++)
        {
            int ind=vc[i][1];
            dummy1[i]=nums1[ind];
            dummy2[i]=nums2[ind];
        }
        //for(int i=0;i<n;i++)cout<<dummy1[i]<<" "<<dummy2[i]<<endl;
        priority_queue<int,vector<int>,greater<int>>pq;
        long long sum=0;
        for(int i=0;i<k-1;i++)
        {
            pq.push(dummy1[i]);
            sum+=dummy1[i];
        }
        long long ans=LONG_LONG_MIN;
        for(int i=k-1;i<n;i++)
        {
            if(pq.size()<k)
            {
                pq.push(dummy1[i]);
                sum+=dummy1[i];
                ans=max(ans,(long long)sum*1L*dummy2[i]);
            }
            else
            {
                int mini=pq.top();
                sum-=mini;
                pq.pop();
                sum+=dummy1[i];
                pq.push(dummy1[i]);
                ans=max(ans,(long long)sum*1L*dummy2[i]);
            }
            cout<<sum<<endl;
        }
        return ans;
    }
};
